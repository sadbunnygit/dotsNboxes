import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.awt.BorderLayout;
import javax.swing.event.ChangeEvent;
import javax.swing.SpinnerModel;
import javax.swing.*;
import javafx.scene.layout.Border;
import javax.swing.border.EmptyBorder;
import java.awt.*;

/**
 * Driver: A game of dots and boxes
 *  This is where the jgameFrames, jpanel and buttons are made
 *  Listens to buttons to preform actions
 *
 * @author (Danelle)
 * @version (Start: Nov 20 2023, Last Edited: Dec 1 2023)
 */
public class Driver implements ActionListener
{
    final static public boolean DEVMODE = false; //toggled by me sadbunny, toggles stuff for debugging 
    
    //FINAL VARS
    
    final static public int NUMOFBUTS_GAME = (DEVMODE)?2:2; //2 unless in dev mode, dev mode is changed in code *could be same
    final static public int NUMOFBUTS_START = (DEVMODE)?2:2; //2 unless in dev mode, dev mode is changed in code
    //start frame buttons
    final static public int bSTART = 0; //start button index
    final static public int bQUIT = 1; //qiut button index
    //game frame buttons
    final static public int bRESET = 0; //reset button index
    final static public int bQUITGAME = 1; //quit game button index
    
    static JFrame gameFrame, startFrame;
    static GridPaper game;
    static JPanel buttonPanelGame, buttonPanelStart;
    static JButton[] gameButtons, startButtons;
    
    // Constructor - default object's template
    public Driver() //at the start make the start menu frame
    {
        //new gameFrame for the rules and stuff
        startFrame = new JFrame(); 
        startFrame.setTitle("Start Menu");
        //generated by chat gpt because i am lazy, is the rules
        JLabel welcomeLabel = new JLabel("<html>"
            + "<div style='text-align: center;'>"
            + "<h1 style='color: #007BFF;'>Welcome to Dots and Boxes!</h1>"
            + "<h2 style='color: #28A745;'>Objective:</h2>"
            + "<p>Connect dots to form squares and capture them.</p>"
            + "<h3 style='color: #FFC107;'>Gameplay:</h3>"
            + "<p>Players take turns connecting two horizontally or vertically adjacent dots.<br>"
            + " When a player completes the fourth side of a 1x1 box,<br> they capture the box and take another turn.</p>"
            + "<h3 style='color: #DC3545;'>Strategy:</h3>"
            + "<p>Try to create boxes strategically to capture more territory.<br>"
            + " Be cautious not to leave opportunities for your opponent.</p>"
            + "<h2 style='color: #6610F2;'>Scoring:</h2>"
            + "<p>The player with the most captured boxes wins the game.</p>"
            + "<h3 style='color: #6C757D;'>Setup:</h3>"
            + "<p>On start, choose the number of players (their colour and 2 initials) and grid size. <br>Any incorrect input will default</p>"
            + "<p><br> <font color=#DDE75E size=2> Sadbunny was here </font> </p>"
            + "</div>"
            + "</html>");
        
        // Set padding for better spacing
        int padding = 20;
        welcomeLabel.setBorder(new EmptyBorder(padding, padding, padding, padding));
        
        startFrame.getContentPane().add(welcomeLabel,BorderLayout.CENTER);
        
        //buttons
        buttonPanelStart = new JPanel();
        startButtons = new JButton[NUMOFBUTS_START]; 
        
        startButtons[bSTART] = new JButton("Start Game");
        startButtons[bQUIT] = new JButton("Quit Program");
        
        for(int i=0;i<NUMOFBUTS_START; i++)
        {    
            startButtons[i].addActionListener(this); // ears
            buttonPanelStart.add(startButtons[i]);    
        }
        startFrame.getContentPane().add(buttonPanelStart,BorderLayout.SOUTH);
        
        startFrame.setVisible(true);
        startFrame.setResizable(true);
        startFrame.pack();
        startFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }
    /*
     * Add a listner to our program, 
     * this will listen to the mouse clicks and the buttons. A
     * button being an actioned, so it checks is an action is preformed
    */    
    public void actionPerformed(ActionEvent ae)
    {
        //find the source of the mouse click, Which button was clicked?
        JButton source = (JButton) ae.getSource();
        if (source == startButtons[bSTART])
        {
            //if they have a game going
            if(gameFrame!=null)
                if(JOptionPane.showConfirmDialog(startFrame, "Are you sure? This will delete the current game", "Confirmation", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
                {     //if they are sure then delete the game to make a new one
                    gameFrame.setVisible(false);
                    gameFrame.dispose();
                    gameFrame = null;
                }
            if(gameFrame==null)
                makeGameFrame();
        }
        if (source == startButtons[bQUIT])
            System.exit(0);
        if (gameFrame != null) //wont even have access to this button without a gameframe but make sure these only work with one
        {
            if (source == gameButtons[bRESET]) 
            {    /*# FOR DEV MODE*/  if (Driver.DEVMODE){System.out.println("\nNREW ROUND\n");}
                 game.reset();
            }
            if (source == gameButtons[bQUITGAME]) 
            {
                /*# FOR DEV MODE*/  if (Driver.DEVMODE){System.out.println("\nQIOTNTHIS ROUND\n");}
                if (JOptionPane.showConfirmDialog(gameFrame, "Are you sure you want to quit the current game?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) 
                    deleteGameFrame();
            }
        }
    }
    private void makeGameFrame()
    {
        //make the gameFrame where the game will be played
        gameFrame = new JFrame();
        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        buttonPanelGame = new JPanel();
        gameButtons = new JButton[NUMOFBUTS_GAME];

        gameButtons[bRESET] = new JButton("Reset Game");
        gameButtons[bQUITGAME] = new JButton("Quit Game");

        for (int i = 0; i < NUMOFBUTS_GAME; i++) 
        {
            gameButtons[i].addActionListener(this);
            buttonPanelGame.add(gameButtons[i]);
        }
        gameFrame.getContentPane().add(buttonPanelGame, BorderLayout.SOUTH);
        
        //grid paper
        String[] options = {"2x2","3x3", "4x4", "5x5", "6x6", "7x7", "8x8"};
        int size = JOptionPane.showOptionDialog(game,"Choose Grid Size","Grid Size",JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options, options[0])+2;//+2 because grid starst at 2x2
        //if clicked cancel (x)
        if (size < 2) 
        {
            deleteGameFrame();
            return;
        }
        String playersInput = JOptionPane.showInputDialog(null, "Enter the number of players (1-"+GridPaper.MAXPLAYERS+"):");
        //if clicked cancel (x)
        if (playersInput == null) 
        {
            deleteGameFrame();
            return;
        }
        int numOfPlayers = 2; // Default value
        try 
        {
            numOfPlayers = Math.abs(Integer.parseInt(playersInput));
            if(numOfPlayers>GridPaper.MAXPLAYERS)
                numOfPlayers = GridPaper.MAXPLAYERS;
        } 
        catch (NumberFormatException e) //for invalid input 
        {
            numOfPlayers = 2;
        }
        //create the game!
        game = new GridPaper(size,numOfPlayers);
        gameFrame.setTitle("Dots & Boxes ("+options[size-2]+")");
        gameFrame.getContentPane().add(game,BorderLayout.CENTER); 
        gameFrame.pack(); //fit around all the jpanels
        gameFrame.setVisible(true);
        gameFrame.setResizable(false);
    }
    public static void deleteGameFrame()
    {
        gameFrame.setVisible(false);
        gameFrame.dispose();
        gameFrame = null;
    }
    // Main Method,
    public static void main(String[] args)
    {
        Driver app = new Driver(); //calls the constructor to doing the stuff we would usually put into there
    }
}
